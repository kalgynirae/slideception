#!/home/colinchan/talk/env/bin/python3
import inspect

from slides import (
    bash,
    display_slides,
    flair,
    format_slide,
    ipython,
    python,
    slide,
    wait,
)


@slide
def title():
    """Using Python for Efficiency (and Fun!)

    ```
                _________      _                          
          ___  / __/ __(_)____(_)__  ____  _______  __    
         / _ \/ /_/ /_/ / ___/ / _ \/ __ \/ ___/ / / /    
        /  __/ __/ __/ / /__/ /  __/ / / / /__/ /_/ /     
        \___/_/ /_/ /_/\___/_/\___/_/ /_/\___/\__, /      
                                             /____/       
                 (  a l s o    f u n  )                   
    ```
    """
    bash(
        history=["pwd", "whoami"], init=["cd /facebook"],
    )


@slide
def unscramble():
    """Unscramble

    I wrote a word unscrambler in Python.

    * Great for puzzle-solving
    * Slower than most unscramble websites
    * But the results are more usable
    * I can easily tweak the algorithm if needed
    """
    bash(history=["e ~/bin/unscramble", "unscramble eemertapurt"])


@slide
def bash_history():
    """A quick note about bash history

    Learning to recall history effectively is *very* helpful.

    * **Ctrl+R** for reverse incremental search
    * **Up**/**Down** for prefix matching
    """
    bash(history=["echo show dotfiles branches, try searching for LAPTOP"])


@slide
def readline_slide():
    """Readline

    Readline provides fancy line-editing on Linux.

    * tab completion
    * history
    * editing shortcuts

    ```python3
    import readline, rlcompleter
    readline.parse_and_bind("tab: complete")
    ```
    """
    print(format_slide("Prompt **without** readline:").rstrip("\n"))
    try:
        input(">>> ")
    except (EOFError, KeyboardInterrupt):
        print()
        pass

    import readline
    import rlcompleter

    readline.parse_and_bind("set show-mode-in-prompt off")
    readline.parse_and_bind("tab: complete")
    print(format_slide("Prompt **with** readline:").rstrip("\n"))
    python()


@slide
def readline_inputrc():
    """Readline

    Readline can be configured in `~/.inputrc`.

    ```bash
    "\e[A":history-search-backward
    "\e[B":history-search-forward

    set blink-matching-paren on
    set colored-completion-prefix on
    set enable-bracketed-paste on
    ```
    """
    python()
    ipython()


@slide
def pythonstartup():
    """Customized interactive interpreter

    By setting `PYTHONSTARTUP`, you can initialize your interactive
    sessions.

    * Import things you use frequently
    * ~~Enable readline~~

    ```python3
    from datetime import date, datetime, timedelta
    from random import choice, sample
    parser = argparse.ArgumentParser()
    ```
    """
    bash(history=["e ~/.pythonrc", "printenv PYTHONSTARTUP"])


@slide
def colorize():
    """colorize

    I made a script to colorize text based on common prefixes.

    * Useful for visually inspecting command output
    * Super straightforward to write in Python

    ```python3
    for color, (key, lines) in zip(
        cycle_colors(), groupby(sys.stdin, key=key)
    ):
        for line in lines:
            print(f"{color}{line}")
    ```
    """
    bash(
        history=["cat data | hl sorting-algorithms | l", "l data"],
        init=["cd ~/colorize-example"],
    )


@slide
def rofi_bookmarks():
    """rofi-bookmarks

    I made a script to load my Firefox bookmarks into Rofi.

    * Rofi provides a nice UI and fuzzy search
    * **Enter** to open
    * **Alt+c** to copy
    * **Alt+m** to copy Markdown syntax
    """
    print("(show recipe example)")
    wait(True)
    bash(history=["e ~/bin/rofi-bookmarks"])


@slide
def slides_demo():
    """Slides in the terminal

    I made a slide renderer in Python (for this talk).

    * Slides are **functions** with content in the docstring
    * Then you can run *arbitrary code*!
    """
    code = inspect.getsource(slides_demo)
    print(format_slide(f"```python3\n{code}\n```"), end="")


@slide
def slides_known_issues():
    """Slides in the terminal

    Incomplete list of things that donâ€™t work yet:

    ## Formatting
    * nested lists (actually nested *anything*)
    * blockquotes
    * tables

    ## Functionality
    * go to previous slide
    * jump to a specific slide
    * resizing the window during the presentation
    """


with flair():
    display_slides()
